generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// User info - accounts from OAuth providers and password & email login

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  organisation  String?
  createdAt     DateTime      @default(now())
  emailSignup   Boolean       @default(false)
  customImages  CustomImage[]
  accounts      Account[]
  sessions      Session[]
  secret        Secret?
}

model Secret {
  id         String  @id @default(cuid())
  password   String
  resetToken String?
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Data

model CustomImage {
  id          String   @id @default(cuid())
  url         String   @db.Text
  category    String
  productName String
  s3Key       String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
